function ContentHelper (firebase) {
    this.firebase = firebase;
    this.db = firebase.database();
};

var standardFirebaseError = function (err) {
    if (err.message) {
        swal(err.message);
    }

    console.log(err);
};

/**
 * Retreive an indivual pokemon by id
 *
 * @param  {Number}   id
 * @param  {Function} callback
 * @return {Void}
 */
ContentHelper.prototype.getPokemon = function (id, callback) {
    var self = this;

    this.db.ref(pokemonIndex + '/' + id).once('value')
        .then(function(snapshot) {
            var val = snapshot.val();

            if (val) {
                console.log(id, val);
                callback(val);
            } else {
                console.log('Response from firebase', val);
            }
        })
        .catch(standardFirebaseError);
};

/**
 * Get all of a user's teams
 *
 * @param  {Object}   user
 * @param  {Function} callback
 * @return {Void}
 */
ContentHelper.prototype.getTeams = function (user, callback) {
    this.db.ref('user/' + user.uid + '/teams').once('value')
        .then(function (snapshot) {
            var val = snapshot.val();

            // Default to empty array
            val = val ? val : [];

            callback(val);
        })
        .catch(standardFirebaseError);
};

/**
 * Save a users team by id
 *
 * @param  {Object} user
 * @param  {Number} id
 * @param  {Array} team
 * @return {Void}
 */
ContentHelper.prototype.saveTeam = function (user, id, team) {
    this.db.ref('user/' + user.uid + '/teams/' + id).set(team);
};


/**
 * Set shared team in database
 *
 * @param  {Object}   userEmail
 * @param  {Object}   team
 * @return {Void}
 */
ContentHelper.prototype.shareTeam = function (userEmail, team) {
    var id = this.db.ref('shared-teams').push().getKey();

    this.db.ref('shared-teams/' + id).set({
        email: userEmail,
        team: team.members,
        name: team.name,
    });

    return window.location + '?shared=' + id;
};

/**
 * Perform a search filtering results by user defined parameters
 *
 * @param  {Object}   filters
 * @param  {Function} callback
 * @return {Void}
 */
ContentHelper.prototype.filteredSearch = function (filters, callback) {
    var self = this,
        orders = this.getOrders(filters),
        queryParams = this.getQueryParams(orders[0], filters),
        query = this.db.ref(pokemonIndex).orderByChild(orders[0]).limitToFirst(50); // Limiting to 50 for now due to firebase memory constraints

    if (queryParams.length === 1) {
        query = query.equalTo(queryParams[0]);
    } else if (queryParams.length === 2) {
        query = query.startAt(queryParams[0]).endAt(queryParams[1]);
    }

    query.once('value')
        .then(function (snapshot) {
            var filteredResults = [];

            // Seperate out these two possibilities as a snapshot will retain order generated by firebase
            // whereas retreiving the value sets each document's id as an index of an Object
            if (orders.length === 1) {
                filteredResults = self.applySecondaryRequirements(snapshot, orders, filters, true);
            } else {
                filteredResults = self.applySecondaryRequirements(snapshot.val(), orders, filters, false);
            }

            callback(filteredResults);
        })
        .catch(standardFirebaseError);
};

/**
 * Get primary order (to pass to firebase) and if applicable a secondary order (for front end sorting)
 *
 * @param  {Object} filters
 * @return {Array}
 */
ContentHelper.prototype.getOrders = function (filters) {
    var orders = [];

    if (filters.name.length) {
        orders.push('species');
    } else if (filters.minPrice >= 0 || filters.maxPrice <= 100) {
        orders.push('price');
    } else if (filters.primaryType) {
        orders.push('types/0/type/name');
    } else if (filters.secondaryType) {
        orders.push('types/1/type/name');
    }

    if (orders.length && orders[0] !== filters.order) {
        orders.push(filters.order);
    }

    return orders;
};

/**
 * Get query parameters to pass to firebase
 *
 * @param  {String} primaryOrder
 * @param  {Object} filters
 * @return {Array}
 */
ContentHelper.prototype.getQueryParams = function (primaryOrder, filters) {
    var params = [],
        name = filters.name.toLowerCase().trim();

    if (primaryOrder === 'species' && name.length) {
        params = [name, name + '\uf8ff'];
    } else if (primaryOrder === 'price') {
        params = [filters.minPrice, filters.maxPrice];
    } else if (primaryOrder === 'types/0/type/name') {
        params = [filters.primaryType];
    } else if (primaryOrder === 'types/1/type/name') {
        params = [filters.secondaryType];
    }

    return params;
};

/**
 * Front end filtering performed for users defined parameters as firebase can only handle a single
 * filter
 *
 * @param  {Array|Object}  results    [description]
 * @param  {Array}  orders     [description]
 * @param  {Object}  filters    [description]
 * @param  {Boolean} isSnapshot [description]
 * @return {Array}
 */
ContentHelper.prototype.applySecondaryRequirements = function (results, orders, filters, isSnapshot) {
    var self = this,
        filteredResults = [],
        customSort;

    if (isSnapshot) {
        results.forEach(function (result) {
            var res = result.val();
            if (self.meetsFilterCriteria(res, orders[0], filters)) {
                filteredResults.push(res);
            }
        });
    } else {
        for (var id in results) {
            if (results.hasOwnProperty(id)) {
                if (this.meetsFilterCriteria(results[id], orders[0], filters)) {
                    filteredResults.push(results[id]);
                }
            }
        }
    }

    if (orders.length === 2) {
        filteredResults.sort(this.getSortFunction(orders[1]));
    }

    return filteredResults
};

/**
 * Determine if a pokemon meets user defined filter parameters
 *
 * @param  {Object} pokemon      Pokemon returned from firebase
 * @param  {String} primaryOrder Order field passed to firebase
 * @param  {Object} filters      All user input filters
 * @return {Boolean}
 */
ContentHelper.prototype.meetsFilterCriteria = function (pokemon, primaryOrder, filters) {
    // No break statements included as we use the switch statement to determine which is the
    // first applicable filter to start applying
    switch (primaryOrder) {
        case 'species':
            if (filters.minPrice > 0 && pokemon.price < filters.minPrice ||
                filters.maxPrice < 100 && pokemon.price > filters.maxPrice) {
                return false;
            }
        case 'price':
            if (filters.primaryType && pokemon.types[0].type.name !== filters.primaryType) {
                return false;
            }
        case 'types/0/type/name':
            if (filters.secondaryType && pokemon.types[0].length === 2 && pokemon.types[1].type.name !== filters.secondaryType) {
                return false;
            }
    }

    return true;
};

/**
 * Custom function for sorting pokemon by a given property
 *
 * @param  {String} order
 * @return {Function}
 */
ContentHelper.prototype.getSortFunction = function (order) {
    return function (pokemon1, pokemon2) {
        if (pokemon1[order] > pokemon2[order]) {
            return 1;
        } else if (pokemon1[order] < pokemon2[order]) {
            return -1;
        }

        return 0;
    };
};


ContentHelper.prototype.setSharedTeam = function (sharedTeamId, callback) {
    this.db.ref('shared-teams/' + sharedTeamId).once('value')
        .then(function (snapshot) {
            callback(snapshot.val());
        })
        .catch(standardFirebaseError);
};
